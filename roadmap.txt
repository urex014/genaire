Phase 1: Setup & Basic Architecture
Project Structure & Initialization

Separate client/ (React) and server/ (Express) folders inside your root project.

Initialize git, npm/yarn in both folders.

Setup .env files for environment variables in server (e.g., Paystack keys).

Core Dependencies & Tools

Install React Router, Axios, TailwindCSS for frontend.

Setup Express, dotenv, CORS, body-parser in backend.

Setup ESLint, Prettier for consistent code style.

Phase 2: Public Website (Client)
Basic Pages & Routing

Create public routes: Home, Shop, Product Details.

Setup layouts (PublicLayout, AdminLayout).

Implement responsive Navbar with dropdowns and icons.

Product Display & Carousel

Build a carousel for featured images/products.

Build product listing & details pages.

Fetch product data from backend API (mock first).

Static Content & Branding

Add brand info, footer, contact info.

Add placeholder images & texts.

Phase 3: Backend API
Data Models & Database

Define product schema (name, description, price, images, category).

Define user/admin schema for authentication.

Define orders schema for purchases.

API Endpoints

CRUD for products (admin only).

Public endpoints for products & categories.

Authentication routes for admin login/logout.

Payment Integration

Implement Paystack payment init & verify routes.

Setup webhook (optional) for payment status updates.

Phase 4: Admin Dashboard (Client)
Authentication & Private Routes

Build login page for admin.

Protect admin routes using PrivateRoute wrapper.

Persist admin session with tokens.

Admin Pages

Dashboard overview (stats, recent orders).

Manage Products page with create, edit, delete functionality.

Orders page to view and manage customer orders.

File Upload

Setup image upload for product pictures (local or cloud storage).

Integrate file uploads in Manage Products page.

Phase 5: Payment Flow (Full Stack)
Client Checkout

Add “Shop Now” or checkout buttons linked to Paystack payment flow.

Redirect users to Paystack checkout page.

Payment Verification & Order Creation

Verify payments on success redirect or webhook.

Save order details in DB after successful payment.

Order Confirmation & History

Show order confirmation to customers.

Optionally, add order history page for customers.

Phase 6: Polish & Deployment
UI/UX Improvements

Responsive design fixes.

Loading states, error handling, input validation.

Testing

Unit and integration tests for critical components and API routes.

Deployment

Deploy backend (e.g., Heroku, DigitalOcean, or Railway).

Deploy frontend (Vercel, Netlify, or same server).

Configure environment variables and secrets securely.

Domain & SSL Setup

Set up your domain name and HTTPS.

{filterPanelOpen && (
        <>
          {/* Overlay */}
          <div className="fixed inset-0 bg-black opacity-40 z-40"></div>

          <aside
            ref={panelRef}
            className="fixed right-0 top-0 h-full w-72 bg-white shadow-lg z-50 p-6 flex flex-col"
            aria-label="Filter panel"
          >
            <div className="flex justify-between items-center mb-6">
              <h2 className="text-xl font-semibold">Filters</h2>
              <button
                onClick={() => setFilterPanelOpen(false)}
                aria-label="Close filters"
                className="text-gray-700 hover:text-gray-900 focus:outline-none"
              >
                &#x2715;
              </button>
            </div>

            {/* In Stock Filter */}
            <label className="flex items-center space-x-2 mb-4 cursor-pointer">
              <input
                type="checkbox"
                checked={inStockOnly}
                onChange={(e) => setInStockOnly(e.target.checked)}
                className="form-checkbox h-5 w-5 text-indigo-600"
              />
              <span>In Stock Only</span>
            </label>

            {/* Price Range Filter */}
            <div className="mb-4">
              <label className="block mb-1 font-medium">Price Range ({currency})</label>
              <div className="flex space-x-2">
                <input
                  type="number"
                  placeholder="Min"
                  value={priceMin}
                  onChange={(e) =>
                    setPriceMin(e.target.value === "" ? "" : Number(e.target.value))
                  }
                  className="border rounded px-3 py-2 w-1/2"
                  min={0}
                />
                <input
                  type="number"
                  placeholder="Max"
                  value={priceMax}
                  onChange={(e) =>
                    setPriceMax(e.target.value === "" ? "" : Number(e.target.value))
                  }
                  className="border rounded px-3 py-2 w-1/2"
                  min={0}
                />
              </div>
            </div>

            {/* Sort By */}
            <div>
              <label htmlFor="sortBy" className="block mb-1 font-medium">
                Sort by
              </label>
              <select
                id="sortBy"
                value={sortBy}
                onChange={(e) => setSortBy(e.target.value as SortOption)}
                className="border rounded px-3 py-2 w-full"
              >
                <option value="alphabetical">Alphabetically</option>
                <option value="priceAsc">Price: Low to High</option>
                <option value="priceDesc">Price: High to Low</option>
                <option value="dateAdded">Date Added</option>
              </select>
            </div>
          </aside>
        </>
      )}


METIS/USDT
exchanges: Bingx
signal Type: Regular(long);
Leverage Cross(50x)

Entry targets:
18.90

Take-Profit Targets:
1. 19.18350
2. 19.37250
3. 19.56150
4. 19.84500
5. 20.03400
6. 20.31750

stop Targets:
5-10%